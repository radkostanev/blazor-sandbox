@page "/second"

@using Telerik.DataSource

<TelerikGrid Data="@GridData"
             FilterMode="@GridFilterMode.FilterMenu"
             Pageable="true"
             Width="600px">
    <GridColumns>
        <GridColumn Field="@(nameof(Product.Name))" Title="Product" Filterable="false" />
        <GridColumn Field="@(nameof(Product.Size))">
            <FilterMenuTemplate>
                <TelerikButton OnClick="@(() => ToggleAll(true, context))">Select All</TelerikButton>
                <TelerikButton OnClick="@(() => ToggleAll(false, context))">Clear All</TelerikButton>
                <TelerikCheckBox  Value="@isXsChecked" />
                <TelerikCheckBox Value="@isSmChecked" />
                <TelerikCheckBox Value="@isLgChecked" />
            </FilterMenuTemplate>
        </GridColumn>
    </GridColumns>
</TelerikGrid>

@code {
    private bool isXsChecked = false;
    private bool isSmChecked = false;
    private bool isLgChecked = false;

    void ToggleAll(bool isChecked, FilterMenuTemplateContext context)
    {
        isXsChecked = isSmChecked = isLgChecked = isChecked;

        foreach (var size in Sizes)
        {
            UpdateCheckedSizes(isChecked, size, context);
        }

        StateHasChanged();
    }

    private void UpdateCheckedSizes(bool isChecked, string itemValue, FilterMenuTemplateContext context)
    {
        var compositeFilterDescriptor = context.FilterDescriptor;
        compositeFilterDescriptor.LogicalOperator = FilterCompositionLogicalOperator.Or;

        if (!isChecked)
        {
            // find and remove the filter descriptor for this checkbox
            compositeFilterDescriptor.FilterDescriptors.Remove(compositeFilterDescriptor.FilterDescriptors.First(x =>
            {
                var fd = x as FilterDescriptor;
                if ((fd.Operator == FilterOperator.IsNull && itemValue == null) ||
                    (fd.Operator == FilterOperator.IsEqualTo && fd.Value?.ToString() == itemValue))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }));
        }
        else
        {
            // add a filter descriptor for this checkbox
            compositeFilterDescriptor.FilterDescriptors.Add(new FilterDescriptor()
                {
                    Member = nameof(Product.Size),
                    MemberType = typeof(string),
                    Operator = itemValue == null ? FilterOperator.IsNull : FilterOperator.IsEqualTo,
                    Value = itemValue
                });
        }
    }

    private List<Product> GridData { get; set; }

    private string[] Sizes = new string[] { "XS", "S", "M", "L", "XL", null };

    protected override void OnInitialized()
    {
        GridData = Enumerable.Range(1, 70).Select(x => new Product
            {
                Id = x,
                Size = Sizes[x % Sizes.Length],
                Name = $"Product {x}"
            }).ToList();

        base.OnInitialized();
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Size { get; set; }
    }
}