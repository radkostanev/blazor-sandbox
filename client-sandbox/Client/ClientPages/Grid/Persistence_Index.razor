@page "/grid/persistance/index"

@using Telerik.DataSource;

@inject ProductService ProductService

@inject LocalStorage LocalStorage

<div class="example-wrapper">
    <button @onclick="@SetState"> Set State </button>
    <button @onclick="@ResetState"> Reset State </button>
</div>

<TelerikGrid @ref="@Grid"
             Data="@GridData"
             Pageable="true"
             PageSize="5"
             Sortable="true"
             Height="400px"
             Width="900px"
             Resizable="true"
             Reorderable="true"
             Groupable="true"
             OnStateInit="@((GridStateEventArgs<Product> args) => OnStateInit(args))"
             OnStateChanged="@((GridStateEventArgs<Product> args) => OnStateChanged(args))">
    <GridColumns>
        <GridColumn Field=@nameof(Product.ProductName) Title="Product Name" Width="150px" />
        <GridColumn Field=@nameof(Product.UnitPrice) Title="Unit Price" />
        <GridColumn Field=@nameof(Product.UnitsInStock) Title="Units in stock" />
        <GridColumn Field=@nameof(Product.CreatedAt) Title="Date created" />
        <GridColumn Field=@nameof(Product.Discontinued) Title="Discontinued">
            <GroupFooterTemplate>
                <strong>Count: @context.Count</strong>
            </GroupFooterTemplate>
        </GridColumn>
    </GridColumns>
    <GridAggregates>
        <GridAggregate Field=@nameof(Product.Discontinued) Aggregate="@GridAggregateType.Count" />
    </GridAggregates>
</TelerikGrid>

@code {
    public TelerikGrid<Product> Grid { get; set; }
    public List<Product> GridData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GridData = (await ProductService.GetProductsAsync(40, true)).ToList();
    }

    async Task OnStateInit(GridStateEventArgs<Product> args)
    {
         args.GridState = await LocalStorage.GetItem<GridState<Product>>("gridIndexState");
    }

    void OnStateChanged(GridStateEventArgs<Product> args)
    {
        LocalStorage.SetItem("gridIndexState", Grid?.GetState());
    }

    private void SetState()
    {
        GridState<Product> state = new GridState<Product>()
        {
            GroupDescriptors = new List<GroupDescriptor>()
        {
                new GroupDescriptor()
                {
                    Member = nameof(Product.Discontinued),
                    MemberType = typeof(bool)
                }
            },
            FilterDescriptors = new List<IFilterDescriptor>()
            {
                new FilterDescriptor() { Member="ProductName", MemberType=typeof(string), Value = "2", Operator = FilterOperator.Contains }
            },
            Page = 2,
            ColumnStates = new List<GridColumnState>()
        {
                new GridColumnState()
                {
                    Index = 3,
                    Width = "150px"
                },
                new GridColumnState()
                {
                    Index = 1,
                    Width = "120px"
                },
                new GridColumnState()
                {
                    Index = 2,
                    Width = "60px"
                },
                new GridColumnState()
                {
                    Index = 4,
                    Width = "150px"
                },
                new GridColumnState()
                {
                    Index = 0,
                    Width = "120px"
                }
            }
        };

        Grid?.SetStateAsync(state);
    }

    private void ResetState()
    {
        Grid?.SetStateAsync(null);
        LocalStorage.RemoveItem("gridIndexState");
    }
}
