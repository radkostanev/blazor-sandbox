@page "/grid/persistance/filtering"

@inject LocalStorage LocalStorage
@inject ProductService ProductService

<div class="example-wrapper">
    <button @onclick="@ResetState"> Reset States </button>
</div>
<h4>FilterRow</h4>
<TelerikGrid @ref="@GridFilterRow"
             Data="@GridData"
             Pageable="true"
             PageSize="10"
             OnStateInit="@((GridStateEventArgs<Product> args) => OnStateInitRow(args))"
             OnStateChanged="@((GridStateEventArgs<Product> args) => OnStateChangedRow(args))"
             FilterMode="@GridFilterMode.FilterRow">
    <GridColumns>
        <GridColumn Field=@nameof(Product.ProductName) Title="Product Name" Width="150px" />
        <GridColumn Field=@nameof(Product.UnitPrice) Title="Unit Price" />
        <GridColumn Field=@nameof(Product.UnitsInStock) Title="Units in stock" />
        <GridColumn Field=@nameof(Product.CreatedAt) Title="Date created" />
        <GridColumn Field=@nameof(Product.Discontinued) Title="Discontinued" />
    </GridColumns>
</TelerikGrid>

<h4>FilterMenu</h4>
<TelerikGrid @ref="@GridFilterMenu"
             Data="@GridData"
             Pageable="true"
             PageSize="10"
             OnStateInit="@((GridStateEventArgs<Product> args) => OnStateInitMenu(args))"
             OnStateChanged="@((GridStateEventArgs<Product> args) => OnStateChangedMenu(args))"
             FilterMode="@GridFilterMode.FilterMenu">
    <GridColumns>
        <GridColumn Field=@nameof(Product.ProductName) Title="Product Name" Width="150px" />
        <GridColumn Field=@nameof(Product.UnitPrice) Title="Unit Price" />
        <GridColumn Field=@nameof(Product.UnitsInStock) Title="Units in stock" />
        <GridColumn Field=@nameof(Product.CreatedAt) Title="Date created" />
        <GridColumn Field=@nameof(Product.Discontinued) Title="Discontinued" />
    </GridColumns>
</TelerikGrid>

@code {
    public TelerikGrid<Product> GridFilterRow { get; set; }
    public TelerikGrid<Product> GridFilterMenu { get; set; }
    public List<Product> GridData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GridData = (await ProductService.GetProductsAsync(40, true)).ToList();
    }

    async Task OnStateInitRow(GridStateEventArgs<Product> args)
    {
        args.GridState = await LocalStorage.GetItem<GridState<Product>>("gridFilteringRowState");
    }

    async Task OnStateInitMenu(GridStateEventArgs<Product> args)
    {
        args.GridState = await LocalStorage.GetItem<GridState<Product>>("gridFilteringMenuState");
    }

    async void OnStateChangedRow(GridStateEventArgs<Product> args)
    {
        await LocalStorage.SetItem("gridFilteringRowState", GridFilterRow?.GetState());
    }

    async void OnStateChangedMenu(GridStateEventArgs<Product> args)
    {
        await LocalStorage.SetItem("gridFilteringMenuState", GridFilterMenu?.GetState());
    }

    private void ResetState()
    {
        GridFilterRow?.SetStateAsync(null);
        GridFilterMenu?.SetStateAsync(null);
        LocalStorage.RemoveItem("gridFilteringRowState");
        LocalStorage.RemoveItem("gridFilteringMenuState");
    }
}

